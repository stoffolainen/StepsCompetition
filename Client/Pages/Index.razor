@page "/"
@using Microsoft.AspNetCore.Authorization
@using BlazorApp.Client.Pages.tmp
@using System.Text.Json
@using System.Text
@inject HttpClient Http

<h1>Välkommen till stegtävlingen 2020!</h1>

<AuthorizeView>
    <Authorized>
        @GetNameAsync(context.User.Identity.Name);

        @if (string.IsNullOrEmpty(name))
        {
            <button type="button" class="btn btn-info" @onclick="(() => ShowModal())">Skapa användare</button>
        }
        else
        {
            <p>Hej, @name! För att registrera steg klicka <a href="/UserTest">här</a> eller välj "Registrera steg" i menyn.</p>
        }
    </Authorized>
    <NotAuthorized>
        @{
            var providers = new Dictionary<string, string>
        {
                { "google", "Google" },
                { "facebook", "Facebook" }
            };
        }

        <div class="container">
            @foreach (var provider in providers)
            {
                <div class="row">
                    <div class="col-sm-12 col-md-9 col-lg-6">
                        <a class="btn btn-block btn-lg btn-social btn-@provider.Key" href="/.auth/login/@provider.Key">
                            <span class="fa fa-@provider.Key"></span> Sign in with @provider.Value
                        </a>
                    </div>
                </div>
            }
        </div>
    </NotAuthorized>
</AuthorizeView>

@code
{
    [CascadingParameter] public IModalService Modal { get; set; }

    private string name;
    private string email;

    private async Task GetNameAsync(string identityEmail)
    {
        email = identityEmail;

        try
        {
            name = await Http.GetFromJsonAsync<string>($"/api/GetUser?email={email}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        StateHasChanged();
    }

    private async Task CreateUserAsync(User user)
    {
        try
        {
            var data = JsonSerializer.Serialize(user);

            var response = await Http.PostAsync("/api/PostUser", new StringContent(data, Encoding.UTF8, "application/json"));
            var content = await response.Content.ReadAsStringAsync();

            response.EnsureSuccessStatusCode();

            name = JsonSerializer.Deserialize<string>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        StateHasChanged();
    }

    async Task ShowModal()
    {
        var formModal = Modal.Show<NameModal>("Ange ditt namn");
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            var user = (User)result.Data;

            await CreateUserAsync(user);
        }

        StateHasChanged();
    }

}
