@page "/activity"
@using BlazorApp.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <h3>Aktuell ställning @DateTime.Today.ToString("yyyy-MM-dd")</h3>

        @if (activityData != null)
        {
            <p>Steg totalt: <strong>@activityData.TotalSteps</strong></p>
            <p>Steg/dag i snitt(hela gruppen): <strong>@Math.Round(activityData.AvgGroupSteps)</strong></p>
            <p>Steg/dag i snitt(personnivå): <strong>@Math.Round(activityData.AvgPersonSteps)</strong></p>

            <div class="simple-form">
                <div class="form-group">
                    <label for="step-input">Antal steg</label>
                    <input @bind="@steps" type="number" class="form-control" id="step-input"/>
                </div>
                <div class="form-group">
                    <label for="activity-date">Datum för utförande</label>
                    <input @bind="@activityDate" type="date" class="form-control" id="activity-date"/>
                </div>
                <button @onclick="(() => SaveStepsAsync(context.User.Identity.Name))" class="btn btn-primary">Spara</button>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-danger" style="width: 10rem; height: 10rem;" role="status">
                    <span class="sr-only">Laddar...</span>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private ActivityData activityData;
    private int steps;
    private DateTime activityDate = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            activityData = await Http.GetFromJsonAsync<ActivityData>("/api/GetActivityData");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task SaveStepsAsync(string email)
    {
        var request = new ActivityRequest
        {
            ActivityDate = activityDate,
            Email = email,
            Steps = steps
        };

        activityData = null;
        steps = 0;
        activityDate = DateTime.Today;

        try
        {
            var data = JsonSerializer.Serialize(request);

            var response = await Http.PostAsync("/api/PostActivity", new StringContent(data, Encoding.UTF8, "application/json"));
            var content = await response.Content.ReadAsStringAsync();

            response.EnsureSuccessStatusCode();

            activityData = JsonSerializer.Deserialize<ActivityData>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        StateHasChanged();
    }
}
